import numpy as np
from dataset import dataset_all_2, dataset_all
from sklearn.manifold import TSNE
import matplotlib.pyplot as plt
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
"""
Do feature visualization task
"""
#%% read needed data
# read the temperatures and spectra generated by uniform profiles
data_dir_0='./input/data_uniform/file'
label_dir_0='./input/data_uniform/label'
spec_0,temp_0,__,___=dataset_all(data_dir_0,label_dir_0)
# read the temperatures and spectra generated by nonuniform profiles--5points
data_dir_1='./input/data_nonuniform/file'
label_dir_1='./input/data_nonuniform/label'
order_dir_1='./file_reading_order.csv'
spec_1,_,__,__=dataset_all_2(data_dir_1,label_dir_1,order_dir_1)
temp_dif_dir='./input/temp_dif_data/1e-3/temp_dens_comp.csv'
temp_dif_select=np.loadtxt(temp_dif_dir)
temp_1=temp_dif_select[:,3]
# read the temperatures and spectra generated by nonuniform profiles--10points
data_dir_2='./input/data_10p/file'
label_dir_fake='./input/data_10p/label'
spec_2,_1,_2,_3=dataset_all(data_dir_2,label_dir_fake)
label_dir_2='./input/data_10p/dens_temp_10p.csv'
temp_2=np.loadtxt(label_dir_2)

data_all=np.vstack((spec_0[:500],spec_1[:500],spec_2[:500]))
#%%
data_all_max=np.max(data_all,0)
data_all_min=np.min(data_all,0)
data_all_norm=(data_all-data_all_min)/(data_all_max-data_all_min)
#%% TSNE
tsne=TSNE(init='random',random_state=555,n_components=2)
embedding=tsne.fit_transform(data_all_norm)
x_min, x_max = embedding.min(0), embedding.max(0)
# all_norm=embedding
all_norm = (embedding - x_min) / (x_max - x_min)  # normalization
embed_0=all_norm[:500]
embed_1=all_norm[500:1000]
embed_2=all_norm[1000:1500]
#%% plot figure
plt.rcParams.update({"font.size": 15})
plt.figure()
plt.scatter(embed_0[:,0],embed_0[:,1],c='k')
plt.scatter(embed_1[:,0],embed_1[:,1],c='r')
plt.scatter(embed_2[:,0],embed_2[:,1],c='b')
plt.legend(["Uniform","5 sections","10 sections"])
plt.xlabel("Feature 2")
plt.ylabel("Feature 1")
plt.xlim([0,1])
plt.ylim([0,1])
plt.tight_layout()
# plt.savefig('output/T_SNE-2')
plt.show()
plt.close()

#%% Linear Discrimantal analysis
# DATA SET PREPARE
all_temp=np.hstack((temp_0[0:500],temp_1[0:500],temp_2[0:500]))
all_temp_norm=(all_temp-all_temp.min())/(all_temp.max()-all_temp.min())
# all_temp_reshape=all_temp.reshape([-1,1])
# final_set=np.hstack((data_all,all_temp_reshape))
final_set=np.zeros_like(data_all_norm)
for i in range(final_set.shape[0]):
    final_set[i]=data_all_norm[i]+all_temp_norm[i] # merge temperature and spectral information
label=np.zeros([1500,1]).squeeze()
label[500:1000]=1
label[1000:1500]=2
#%% LDA, exclude the temperature information
clf = LinearDiscriminantAnalysis(n_components=2)
clf.fit(data_all_norm,label)
transform_data=clf.transform(data_all_norm)
transform_data=(transform_data-transform_data.min(0))/(transform_data.max(0)-transform_data.min(0))
embed_0_new=transform_data[0:500]
embed_1_new=transform_data[500:1000]
embed_2_new=transform_data[1000:1500]
#%% visualization
plt.rcParams.update({"font.size": 15})
plt.figure()
plt.scatter(embed_0_new[:,0],embed_0_new[:,1],c='k')
plt.scatter(embed_1_new[:,0],embed_1_new[:,1],c='r')
plt.scatter(embed_2_new[:,0],embed_2_new[:,1],c='b')
plt.legend(["Uniform","5 sections","10 sections"])
plt.xlabel("Feature 2")
plt.ylabel("Feature 1")
plt.xlim([0,1])
plt.ylim([0,1])
plt.tight_layout()
# plt.savefig('output/LDA_no_aggregate')
plt.show()
plt.close()

#%% train LDV MODEL, include the temperature information
clf = LinearDiscriminantAnalysis(n_components=2,store_covariance=True)
clf.fit(final_set,label)

transform_data=clf.transform(final_set)
transform_data=(transform_data-transform_data.min(0))/(transform_data.max(0)-transform_data.min(0))
embed_0_new=transform_data[0:500]
embed_1_new=transform_data[500:1000]
embed_2_new=transform_data[1000:1500]

#%% visualization
plt.rcParams.update({"font.size": 15})
plt.figure()
plt.scatter(embed_0_new[:,0],embed_0_new[:,1],c='k')
plt.scatter(embed_1_new[:,0],embed_1_new[:,1],c='r')
plt.scatter(embed_2_new[:,0],embed_2_new[:,1],c='b')
plt.legend(["Uniform","5 sections","10 sections"])
plt.xlabel("Feature 2")
plt.ylabel("Feature 1")
plt.xlim([0,1])
plt.ylim([0,1])
plt.tight_layout()
# plt.savefig('output/LDA_multiple')
plt.show()
plt.close()

#%% tsne
tsne=TSNE(init='random',random_state=555,n_components=2)
transform_data=tsne.fit_transform(final_set)
transform_data=(transform_data-transform_data.min(0))/(transform_data.max(0)-transform_data.min(0))
embed_0_new=transform_data[0:500]
embed_1_new=transform_data[500:1000]
embed_2_new=transform_data[1000:1500]
#%%
# plt.rcParams.update({"font.size": 15})
plt.figure()
plt.scatter(embed_0_new[:,0],embed_0_new[:,1],c='k')
plt.scatter(embed_1_new[:,0],embed_1_new[:,1],c='r')
plt.scatter(embed_2_new[:,0],embed_2_new[:,1],c='b')
plt.legend(["Uniform","5 sections","10 sections"])
plt.xlabel("Feature 2")
plt.ylabel("Feature 1")
plt.xlim([0,1])
plt.ylim([0,1])
plt.tight_layout()
# plt.savefig('output/TSNE-multiple')
plt.show()
plt.close()